generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum Role {
  DONOR
  ACCEPTOR
  ADMIN
}

model User {
  id               Int                                   @id @default(autoincrement())
  fname            String
  lname            String
  email            String                                @unique
  password         String
  role             Role
  address          String
  location         Unsupported("geometry(Point, 4326)")? // PostGIS point for latitude/longitude
  orgDocuments     String? // File path or URL for acceptor verification documents
  isVerified       Boolean                               @default(false)
  otp              String?
  otpExpiresAt     DateTime?
  listings         Listing[] // Items posted by the user
  requests         Request[] // Requests made by acceptors
  sentMessages     Message[]                             @relation("SentMessages")
  receivedMessages Message[]                             @relation("ReceivedMessages")
  logs             Log[]
}

// Item listing model
model Listing {
  id          Int                                   @id @default(autoincrement())
  userId      Int
  user        User                                  @relation(fields: [userId], references: [id])
  title       String
  description String?
  category    Category
  location    Unsupported("geometry(Point, 4326)")? // PostGIS point for item pickup
  createdAt   DateTime                              @default(now())
  updatedAt   DateTime                              @updatedAt
  status      ListingStatus                         @default(ACTIVE)
  messages    Message[] // Messages related to this listing
}

// Enum for listing categories
enum Category {
  CLOTHING
  ELECTRONICS
  FOOD
  FURNITURE
  BOOKS
  HOUSEHOLD
  SPECIAL_REQUEST
}

// Enum for listing status
enum ListingStatus {
  ACTIVE
  CLAIMED
  COMPLETED
}

// Request model for acceptors
model Request {
  id          Int           @id @default(autoincrement())
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  title       String
  description String?
  category    Category
  quantity    Int? // Optional for bulk requests
  location    Unsupported("geometry(Point, 4326)")? // PostGIS point for item request
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      RequestStatus @default(OPEN)
  messages    Message[] // Messages related to this request
}

// Enum for request status
enum RequestStatus {
  OPEN
  FULFILLED
  CLOSED
}

// Message model for communication
model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  listingId  Int?
  requestId  Int?
  content    String
  createdAt  DateTime @default(now())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  listing    Listing? @relation(fields: [listingId], references: [id])
  request    Request? @relation(fields: [requestId], references: [id])
}

model Log {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action    String
  createdAt DateTime @default(now())
}
